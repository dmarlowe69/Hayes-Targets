DISPLAY.EXE documentation	V1.5	 12-12-95

V1.0          Initial release.
V1.1 11-16-93 Release.
V1.2 04-08-94 Added 2010 interface card to list of display adapters.
V1.3 09-06-94 Added touch screen for PC450, new options for v4.0 of display.
V1.4 10-07-94 Removed touch screen for PC450. (v4.1 of display)
V1.5 12-12-95 Add description of changes for v4.2 display

INTRODUCTION

The following are a list of files that are associated with the DISPLAY TSR
program.

LCD/Vacuum Florescent displays and keypads can be run from the printer port
or a digital I/O port using interface adapters (such as VF-IFB, LCD-IFB or
2010) and the DISPLAY TSR program.

Note: Each interface adapter supports specific displays and keypads and
have certain connection requirements. See below for specifics.

They are in subdirectory \DISPLAY.

	DISPLAY.EXE	TSR program to run display/keypad.
	DISPLAY.CPP	Reference code for DISPLAY.EXE
	KPTEST.CPP	Source code for keypad test program
	KPTEST.EXE	Executable file for KPTEST.C
	DSPTEST.CPP	Source code for display test program
	DSPTEST.EXE	Executable code for display test program
	DSQBTEST.BAS	QB 4.5 source code for display example program
	DSQBTEST.EXE	Executable code for QB 4.5 display example program
	KPQBTEST.BAS	QB 4.5 example to get keys from keypad
	KPQBTEST.EXE	Executable code for QB 4.5 keypad test program
	KPOFF.CPP	Borland CPP file for disabling keypad scanning
	KPOFF.COM	Executable which disables keypad scanning on all KPs
	KPON.CPP	Borland CPP file for enabling keypad scanning
	KPON.COM        Executable which enables keypad scanning on all KPs
	AN-0050		Application note for systems without video/keyboards.
	DISPLAY.DOC	This file

NOTE: You must supply INT86.OBJ if using MicroSoft Quick Basic.

The end of this document lists changes/revisions to DISPLAY.EXE and this
document.

Description

DISPLAY.EXE is a terminate and stay resident (TSR) program used to drive
Octagon displays and read keypads.  Displays and keypads are connected via
LCD-IFB, DP-IFB or 2010 interface boards or in some cases may be directly
connected with multipurpose cards.

  Interface card   Display		Connector
    LCD-IFB	   LCD			20 pin LPT or 26 pin digital I/O
    VF-IFB	   Vacuum Florescent	20 pin LPT or 26 pin digital I/O
    2010	   LCD			26 pin LPT

20 pin LPT connectors are found on CPUs such as 5012/5012A/6024/5025 etc.
26 pin LPT connector is found on the 4010 CPU.
26 pin digital I/O connectors are found on 5540, 5600, 5648 etc.
Check the connector information on your product to determine the interface
adapter required.

If connected via the printer connector, the printer is not-functional.
Only one keypad and one display can be functional at one time. (You can
however have multiple displays and keypads by writing your own software.)

Refer to your boards manual for information on connecting displays and
keypads to your card.

Displays currently supported by DISPLAY.EXE are:

		Order # Model	  Description
		1201	DP-2x20	  Vacuum Florescent
		2780	DP-4x40	  Vacuum Florescent
		2784	LCD-4x40  Liquid crystal
		2783	LCD-4x20  Liquid crystal
		2782	LCD-2x40  Liquid crystal
		2781	LCD-2x20  Liquid crystal

Keypads currently supported by DISPLAY.EXE are:
		Order # Model	  Description
		1218	KP-1	  4x4 keypad
		1226	KP-2-16	  4x4 keypad
		1737	KP-3	  4x4 sealed keypad
		2754	KP-2-24	  4x6 keypad
		2755	KP-2-32	  4x8 keypad

Note: The 4x6 and 4x8 keypads can only be used with a digital I/O port.
The 4x4 keypads can be used with either an LPT port or digital I/O port.

Scanning the keypad may sometimes adversly affect other time critical functions
such as file transfers. If this occurs try transfering the files at slower
baud rates when the keypad scan is enabled. KPOFF.COM may be used before
the transfers have begun and KPON.COM once the transfers are complete. Or
UDISPLAY.COM can be run to disable the keypads/displays by removing the TSR
interrupts. (See cautions below when removing the TSR)

We have tried DISPLAY on desk top PC's, such as IBM AT, COMPAQ 386s,
COMPAQ 286, IBM-PC. The new DISPLAY TSR (v4.0) automatically adjusts to
different CPU speeds when it is first started. The hardware for the printer
may differ between each system, so it is difficult at best to make one
universal driver. The W1nnnn and W2nnnn options have now been removed.

A source code version for DISPLAY is included on the disk (DISPLAY.CPP).
The source code is not supported by Octagon.  It is provided as a guide so
users may write their own drivers for different displays and keypads.  You
may also want to incorporate this code as part of your code instead of
using a TSR program.

Driver Information

Your Octagon CPU cards utility disk has a program called DISPLAY.EXE. This
program is used to drive the display as a printer and can read a keypad.
DISPLAY is a terminate-stay-resident (TSR) program.  It is installed simply
by running the program with command line parameters listed below.

DISPLAY can now be de-installed. However the de-installation only removes
the "hooked" interrupts and does not restore any CPU memory. De-installing
TSRs (DISPLAY or other TSRs) should be done in the reverse order of their
installation. Otherwise odd (and sometimes fatal) system behaviour results!

If no paramaters are given to DISPLAY a menu of available options will
be displayed. See this menu for currently supported options.

Note:  DISPLAY initializes LCD displays when first invoked.  You MUST have
the display installed before running DISPLAY.

When the line printer number is specified (L option), any PRINTs to that port
will go to the display.  When a digital I/O port is used (as on the 5600 &
5710 cards), the next line printer number (LPTn) will be automatically
assigned.  For example, if you have LPT1 already in your system and you
have the display interface card installed into a digital I/O port, the
display and keypad will be accessed as LPT2.  If LPT2 is in your system, then
it would be accessed as LPT3.

Description of operation

When a printer port is used to drive the displays, DISPLAY replaces the
printer interrupt INT 17 with its own driver.  The display may be accessed
with OPEN "LPTn:" in your program, or LPRINT if using LPT1.

Odd behaviour when accessing the display through device LPTn.

Some characters are filtered by some languages (such as QuickBasic) when sent
to an LPT. For example trying to position the cursor at position 13 produces
odd results since the driver interprets the 13 as a carriage return and
automatically inserts a line feed. The driver also keeps track of the
number of characters sent to the display and sends an automatic carriage
return and line feed when the maximum characters per line is received. Some
of this behaviour can be overcome by careful programming and trial and error.
However using the direct INT 17 interface will bypass the odd behaviour.

When a digital I/O port is used to drive a display (using an LCD-IFB or
DP-IFB), you must print out using INT 17 interrupts.  Some Octagon digital
I/O cards this would include are: 5600, 8780, 8790.  Example programs are
included on this disk.

The keypad is scanned every tick time (approximately 18.2 times/second).
The keypad scan routine is attached to interrupt 1CH in the system tick
servicing routine.  DISPLAY chains to the other 1CH interrupt so that if
other routines use the tick timer they will get serviced also.

The keypad scanner will save up to 8 key presses.  Additional key presses,
if old ones are not removed from the buffer, will be discarded.

The keypad is accessed using special INT 17 functions.  These functions
are documented below.  Most high level languages can access the keypad via
some form of an INT function.  The keypad cannot be accessed from
GW-BASIC (R).


Selecting Display types and keypad sizes

The number after a D or K in the command line designates the display and
keypad types.  The D or K parameter may be left off so you can have just a
display or just a keypad. Leaving all parameters off will display a menu.

Selecting connector ports

You must tell display where the display/keypad will be connected. Use
the with the Ln (line printer) and Annnn (Digital I/O) options to do this.
These parameters are mutually exclusive. If neither Ln/Annnn is present
L1 (LPT1) is the default. Use L2 for LPT2, L3 for LPT3. For digital I/O
ports use the digital I/O ports base address. For example, if using a
5600 card and the base address of the card is 100H, and the display/keypad
is connected to the first connector, use A100. If connected to the second
connector use A104.

Digital I/O initialization

When using the Annnn option, the display and keypad ports are assumed
to be from an 82C55 PIO chip.  These chips are found on such Octagon cards
as the 5600, 832, and possibly your CPU card.  DISPLAY initializes the
82C55 according to the display and keypad type.  The default with or
without a 4 x 4 keypad is: Ports A and B, and lower C output, upper C
input.  With a 4 x 8 keypad, lower and upper port C are all inputs.  This
information is provided in case you want to use one of the unused ports.


Using the display

When a printer port is used to drive the displays, DISPLAY chains to the
existing printer interrupt INT 17. It answers when the LPT it is assigned to
is used.  The display may be accessed with OPEN "LPTn:" in your program,
or LPRINT if using LPT1. (see also description of operation above for
warnings about odd behaviour)

The following table lists the commands used to control various aspects of
the display.  These commands are sent as if printing them to the display.
Display.exe interprets these commands, and sends the appropriate control
information to the display. This layer of control allows functions such as
scrolling on LCDs (which is not supported), and having one cursor on 4x40 LCDs
(which is not automatic) to function.

	Command	Function
	08	Backspace cursor one position (do not erase character)
	09	Advance cursor one position (do not erase character)
	0A	Line feed - advance cursor to next line.  Scrolls off top
		line if cursor is at last line and clears the new line.
	0D	Carriage return - position cursor to beginning of the line
	0E	Make cursor indicator invisible (not applicable on DP 2x20)
	0F	Make cursor indicator visible (default)(not applicable on DP
		2 x 20).
	15	Clear display, position cursor to upper left
	16	Home cursor, do not clear display
	1B x	Move cursor to position x.  x is in the form of 
			LL CCCCCC
		Where:	LL = Line number.  Top row is 0.
			CC = Column number.  Left most is 0.
	17	Flashing cursor control.  1 = turn on flashing cursor.  (Not
		available on DP 2 x 20 or DP 4 x 20).

Display control is performed by printing to it.  For example, to position
the cursor from BASIC to row 3, column 5:

		LPRINT CHR$(&H1B);CHR$(&H85);

Don't forget to include the ';' character at the end of the line or else
BASIC will add the extra carriage return/line feed and force the cursor
to the next line.  If you are using INT 17, use function 0 to print out
each character.  In the above example, you would call INT 17 twice to print
out both characters.

The cursor position value was derived as follows:

				10 000101
				 |    |
				 |    |= 5 is the column number
				 |= 2 is the row number

Combining this pattern into one byte  10000101  which is 85 hexidecimal.


Other operating notes

Normally a line feed will always scroll down one line.  If you are on the
last line, any information that was on the top line will be forever lost.
This automatic scrolling may be disabled/enabled via the 'S' switch on the
display command line or via an INT 17 function. When scrolling is disabled
the cursor moves to the beginning of a line once the last character on a line
is written.

Column and row numbers begin with 0, not 1.  This means the 5th position
is entered in as a 4.

Using the keypad

The keypad routine scans the keypad every tick time (approximately 18.2
times per second).  When a key is pressed, it goes into a 8 character
buffer.  As keys are pressed, keys are added to the buffer unless removed
by an INT 17 function call.  If the buffer fills, subsequent keys are
ignored.

If two or more keys are pressed simultaneously, only one of the keys
pressed is read.

Key presses are obtained by performing interrupt calls to INT 17 from your
program.

See DSPTEST.CPP, KPTEST.CPP, DSQBTEST.BAS and KPQBTEST.BAS for examples.

--------------------------------------------------------------------------

INT 17 Function and Sub-function Descriptions

Use the following table to make INT 17 calls from your program.  Functions
0, 1, and 2 are standard PC BIOS calls.  Function 3 calls are unique to
DISPLAY and are used for the keypad and some common calls.

Function 0 - Character out

	Call with:	ah = 0
			al = character
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	nothing

Function 1 - Initialize display

	Call with:	ah = 1
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	ah = 8, if no display specified
			ah = 0, if ok

	Comment:	The display is automatically initialized when DISPLAY
			is called.  Use this routine to re-initialize the
			display.  Some programs may call INT 17, function 1 to
			initialize the printer.  The display will clear.

Function 2 - Display status.

	Call with:	ah = 2
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	ah = 8, if no display specified
			ah = 0, if ok

Function 3 - Keypad character

	This function call is unique to DISPLAY.  It consists of several
	subfunction calls described below.

Sub-function 0 - Number of keys in the buffer

	Call with:	ah = 3
			al = 0
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)
	Returns:	ah = number of keys
			0 = none
			1 - 8 otherwise

	Comment:	When 8 keys are in the buffer, any extra key
			presses will be ignored.

Sub-function 1 - Returns key from the buffer.

	Call with:	ah = 3
			al = 1
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	ah = number of key pressed

	Comment:	0 is returned if no keys are available.  A value
			of 1 - 16 is returned for 4 x 4 keypads and 1-32
			for 4 x 8 keypads.  The key is removed from the
			buffer.

		For Octagon keypads, the number returned depends
		upon the position in the keypad.  A 4 x 4 keypad
		will return the following positional values:


				1   2   3   4
				5   6   7   8
				9   10  11  12
				13  14  15  16

		A 4 x 6 keypad will return the following
		positional values:

			1   2   3   4   5   6
			9  10  11  12  13  14
			17 18  19  20  21  22
			25 26  27  28  29  30

		A 4 x 8 keypad will return the following
		positional values:

			1   2   3   4   5   6   7   8
			9  10  11  12  13  14  15  16
			17 18  19  20  21  22  23  24
			25 26  27  28  29  30  31  32

		Your program must translate the positional value
		to the actual value.  For example, you must
		translate a return value of 4 for the letter 'A'
		or any other meaning you may have assigned to it.

Sub-function 2 - returns current key pressed, if any.

	Call with:	ah = 3
			al = 2
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	ah = 0, if no key pressed
			ah = 1 to n, if key is pressed

	Comment:	When a key is held pressed, its positional value
			n, described under sub-function 1, is returned.
			This sub-function does not remove the key from the
			buffer.

Sub-function 3 - flush keypad buffer.

	Call with:	ah = 3
			al = 3
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	nothing

	Comment:	All keys currently in the keypad buffer are
			flushed.

Sub-function 4 - Set debounce period

	Call with:	ah = 3
			al = 4
			bx = number of ticks
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	nothing

	Comment:	The keypad is scanned every tick (about 18.2 times
			per second).  The default is that if a key is
			present at the first and next tick, it is
			considered a valid key press.  This subfunction
			can extend the time required that a key be down
			before it is considered a valid key press.

			A value of 9 in the BX register would debounce for
			approximately 1/2 second.

			Default is 1 tick. 0 is allowed when debouncing
			is done by your application.

Sub-function 5 - Set repeat flag

	Call with:	ah = 3
			al = 5
			bx = 0 or 1
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	nothing

	Comment:	When bx has a value of 0, no keys will repeat.
			This is the default.  When bx has a value of 1,
			then the key is repeated.  The key is repeated
			every tick debounce time.  So, if the debounce
			rate is set to 4, the keypress will repeat at
			a rate of approximately 4 times/second.

Sub-function 6 - Test if currently installed

	Call with:	ah = 3
			al = 6
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	ax = 1
			bx = 2
			cx = 3

	Comment:	This sub-function is useful to determine if the
			DISPLAY routine has been installed.

Sub-function 7 - Returns display and keypad type

	Call with:	ah = 3
			al = 7
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	al = keypad type
				0 = no keypad
				1 = 4 x 4
				2 = 4 x 8
			ah = display type
				0 = no display
				1-n = display type described above under
				initialization.

Sub-function 8 - Returns what LPT number can be used to access display

	Call with:	ah = 3
			al = 8
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	ax = line printer number 0=LPT1,1=LPT2 etc.

			Make sure display type is not 0 using subfunction 7
			before using this subfunction.

	Comment: Subfunctions 7 and 8 are provided to allow your program to
		 automatically sense the type of display and where the
		 display is connected.
		 This is included for compatibility with previous versions.
                 This function should NOT be used.

Sub-function 9 - Sets the scrolling flag for LCD/VF displays

	Call with:	ah = 3
			al = 9
			bx = 0 or 1
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	nothing

			bx = 0 disables scrolling
			bx = 1 enables scrolling

			default depends on the 'S' option to display.

	Comment: The cursor wraps to the beginning of the current line
		 if scrolling is disabled.

Sub-function 10 - Uninstall driver (restore interrupts to previous state)

	Call with:	ah = 3
			al = 10
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	nothing

	Comment: Changes INT 1C and INT 17 back to the previous settings
		 before display was executed. Other TSRs installed after
		 display will not work correctly if they were also chained
		 to these interrupts. No memory is released.

Sub-function 11 - Sets the keypad scan flag

	Call with:	ah = 3
			al = 11
			bx = 0 or 1
			dx = printer number ( 0 = LPT1, 1 = LPT2 ...)

	Returns:	nothing

			bx = 0 disables keypad scanning
			bx = 1 enables keypad scanning

			default is scanning enabled.

	Comment: This is useful if shutting a keypad down temporarily for
		 speed reasons (like transfering files). This does not
		 remove the INT 1C code, just minimizes what it does on each
		 tick.

Revisions

10-22-91

DISPLAY.EXE was modified to accept LPT2 and LPT3.  The line printer number is
specified in command line.  This allows you to use a printer on one port and
the display/keypad on another port.

The display and keypad is always referenced as a printer port in your program
even if you are using a digital I/O port and not a printer port.  If you
have LPT1 in your system, running this program will assign it as the
display port.

If you had two printer ports in your system, you can use the L option to
assign DISPLAY to respond to it.  This means you could have LPT1 or LPT2
for your display port depending upon which number you wanted to use.  The
5540 card allows you to choose a printer port number depending upon the
jumper position and number.

If you are using a digital I/O port (such as those found on the 5600,
5710, 5540) for the display driver and not a printer port, then running
DISPLAY will assign the next LPT number to that I/O port.  The LPT number
will be displayed on the screen when DISPLAY is run.

The keypad test routine (KPTEST.EXE) was changed so that hitting the
<ESC> key gets you out of the program.

DISPLAY.C has been updated to reflect the changes mentioned above.

11-25-92 DISPLAY.CPP v3.5

Modified to be compiled under Borland C++.
Fix bug where all other line printers are disabled once DISPLAY is installed.
Add support for LCD 2x20.
Re-enable interrupts once into INT 17H.

12-28-92 DISPLAY.CPP v3.6
Modified source so some options such as help menu and keyboard may be easily
disabled by a switch in the source code. This allows a smaller executable file
to be built.

06-03-93 DISPLAY.CPP v3.7
Add /W options and support of backslash on LCD displays. Previously when
a backslash was displayed a Yen sign was actually displayed.

11-09-93 DISPLAY.CPP v3.8
Add fixes for 2x20 vacuum florescent display required for faster systems.

11-16-93 DISPLAY.CPP v3.9
Split timing for 2x20 and 4x20 vacuum florescent displays. Add delay
between 4x20 displays in vf_out. Fix W1nnnn and W2nnn options in menu.

09-06-94 DISPLAY.CPP v4.0
Add 8x8 touch screen on PC450.
Add support for multiple keypads/displays. Add dx parameter for keypad
and common functions.

! THIS MAKES PREVIOUS KEYPAD ROUTINES NOT COMPATIBLE WITH THIS DISPLAY TSR !
! MINOR CHANGES ARE REQUIRED (add setting of dx to lpt number-1) TO MAKE   !
! OLD SOFTWARE WORK WITH THIS TSR.					   !

Replaced W1nnnn/W2nnnn timing options with automatic cpu timing check.
Add no scrolling option on displays.
Do automatic sizing of TSR and reduce stack and heap requirements.
Allow debounce count of 0 for no debounce check.
Add uninstall option for removing TSR interrupts.
Add enable/disable keypad scanning options.
Improve keypad scanning algorithm to speed system up.

10-07-94 DISPLAY.CPP v4.1
Remove 8x8 touch screen on PC450.

12-12-95 DISPLAY.CPP v4.2
Correct passing of all registers (except flags) to previous interrupt 17
when the printer number is not for the display or
when function is not 0,1 or 3.
Remove USE LPTn message since many DOSs don't support adding LPT after startup.

